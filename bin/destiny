#!/usr/bin/php

<?php
	/**
	 * Destiny JSON Server
	 * Written By Duane Jeffers <duane@duanejeffers.com>
	 * Copyright (c) 2012 Duane Jeffers
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is furnished
	 * to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	 * IN THE SOFTWARE.
	 *
	 * File: bin/destiny
	 * Purpose: Commandline script to call additional function scripts.
	 */
	
	define('CLIPATH', realpath(dirname(__FILE__))); // We need to locate ourself.
	
	// including cli.class.php for subsequent scripts and errors
	include_once (CLIPATH . '/inc/cli.class.php');
	include_once (CLIPATH . '/inc/cli.func.php');
	
	// Read in the json file of available commands.
	$commands = read_jsonfile(CLIPATH . '/scripts/available.json', TRUE);
	
	// First arg from the commandline is the include script.
	if(isset($argv[1]) && array_key_exists($argv[1], $commands)):
		include (CLIPATH . '/scripts/' . $argv[1] . '.php');
	else: // Did not specify a file. -- Show Default Help Screen, with additional switches.
		$cli = new cli(array('tag:' => 'Specify a search tag',
							 'tags' => 'To Show a List of Available Tags'));
		$cli->print_line('Welcome to the Destiny Server CLI Tools');
		$cli->print_line('Everything here is to help you with setting up and testing your Destiny install.');
		$cli->print_line(NULL);
		$cli->print_line('By Running ' . cli::color_str('destiny', cli::ColorFgLtRed) . ' ' . cli::color_str('<command>/<subcommand>', cli::ColorFgLtGreen));
		$cli->print_line("You'll be up and running in no time.");
		$cli->print_line(NULL);
		
		// Gather the list of available tags.
		$tags = array();
		foreach(array_values($commands) as $arr) {
			foreach($arr['_tags'] as $tag) {
				if(!in_array($tag, $tags)) {
					$tags[] = $tag;
				}
			}
		}
		unset($tag, $arr);
		
		// --tags is to show a list of tags.
		if($cli->opt('tags')) {
			$tag_len = (($len = max(array_map('strlen', $tags))) < ($tlen = strlen('Available Tags')) ? $tlen : $len);
			$cli->print_line('+-' . str_pad('', $tag_len, '-') . '-+');
			$cli->print_line('| ' . str_pad('Available Tags', $tag_len, " ", STR_PAD_BOTH) . ' |');
			$cli->print_line('+-' . str_pad('', $tag_len, '-') . '-+');
			foreach($tags as $tag) {
				$cli->print_line('| ' . str_pad($tag, $tag_len) . ' |');
			}
			
			$cli->print_line('+-' . str_pad('', $tag_len, '-') . '-+');
		}
		// --tag=<value> run a search on all the tags.
		if($cli->opt('tag')) {
			$tag_req = $cli->opt('tag', TRUE);
			// strip available commands that do not have this tag.
			$_commands = array();
			foreach($commands as $cmd => $arr) {
				foreach((array)$tag_req as $tag) {
					if(in_array($tag, $arr['_tags'])) {
						$_commands[$cmd] = $arr;
					}
				}
			}
			$commands = $_commands;
		}
		
		// Output the list of available commands.
		$cmd_len = max(array_map('strlen', array_keys($commands)));
		$desc_len = max(array_map(function($obj) {
			return strlen($obj['_desc']);
			}, array_values($commands)));
		
		$total_pad = $cmd_len + $desc_len + 2;
		
		$cli->print_line('+-' . str_pad('', $cmd_len, '-') . '---' . str_pad('', $desc_len, '-') . '-+');
		$cli->print_line('| ' . str_pad('Available Commands', ($total_pad + 1), " ", STR_PAD_BOTH) . ' |');
		$cli->print_line('+-' . str_pad('', $cmd_len, '-') . '-+-' . str_pad('', $desc_len, '-') . '-+');
		
		foreach($commands as $cmd => $arr):
			$cli->print_line('| ' . cli::color_str(str_pad($cmd, $cmd_len), cli::ColorFgLtGreen) . ' | ' . cli::color_str(str_pad($arr['_desc'], $desc_len), cli::ColorFgLtPurple) . ' |');
		endforeach;
		
		$cli->print_line('+-' . str_pad('', $cmd_len, '-') . '-+-' . str_pad('', $desc_len, '-') . '-+');
		
	endif;
